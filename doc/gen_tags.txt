*gen_tags.vim* Async plugin for vim and neovim to ease the use of ctags/gtags.

Author: Jia Sui (https://github.com/jsfaint)
Repository: https://github.com/jsfaint/gen_tags.vim

==============================================================================
CONTENTS                                                 *gen_tags-contents*

1. Introduction ....................................... |gen_tags-introduction|
2. Usages ............................................. |gen_tags-usage|
3. Commands ........................................... |gen_tags-commands|
4. Mappings ........................................... |gen_tags-mapping|
5. Options ............................................ |gen_tags-options|
6. Events ............................................. |gen_tags-events|

==============================================================================
1. Introduction                                         *gen_tags-introduction*
Async plugin for Vim/NeoVim to ease the use of ctags/gtags
It is used to generate and maintain tags for you with multiple platform support, tested on Windows/Linux/macOS.

|gen_tags.vim| will detect scm(git, hg, svn) root and use it as the project root path.

Generating and updating ctags or gtags will run in the background.

------------------------------------------------------------------------------
|gen_tags.vim| also provides a gtags completion source for |NCM| and |deoplete|,
it's optional, if you don't use ncm, just ignore it :)

------------------------------------------------------------------------------
GNU global(aka gtags) is more powerful than ctags, which support definition,
reference, calling, called, include, string and etc.
But ctags only supports definitions.

Since we can use GNU global why did I still support ctags in this plugin?
That's because GNU global only support 6 languages natively.
`Supported Launages: C, C++, Yacc, Java, PHP4 and assembly`

ctags can support more languages(41 showed on the website).

Actually, global can support more languages with the Pygments plugin parser,
for more details please refer to `PLUGIN_HOWTO.pygments` in global's
documentation.

==============================================================================
2. Usage                                                *gen_tags-usage*

GTAGS support the third-party library by setting an environment variable `GTAGSLIBPATH`
But you can take a more straightforward way to do the same thing,
by create a symbol link of the library


* Linux/macOS
>
  ln -s /usr/include/ .
<

* Windows
>
  mklink /J include C:\TDM-GCC-32\include
<

==============================================================================
3. Commands                                             *gen_tags-commands*

------------------------------------------------------------------------------
* command for ctags                                     *gen_tags-ctags*

:GenCtags                                               *:GenCtags*

Generate ctags database

:EditExt                                                *:EditExt*

Edit an extend configuration file for this project,
use for add third-party library ctags database
The extend database will be generate automatically.

:ClearCtags                                             *:ClearCtags*

`:ClearCtags`      Remove tags files.
`:ClearCtags!`     Remove all files, include db dir

------------------------------------------------------------------------------
* command for gtags                                     *gen_tags-gtags*

:GenGTAGS                                               *:GenGTAGS*

Generate GTAGS

:ClearGTAGS                                             *:ClearGTAGS*

`:ClearGTAGS`     Remove GTAGS files
`:ClearGTAGS!`    Remove all files, include the db dir

==============================================================================
4. Mappings                                             *gen_tags-mappings*

`ctrl+]` is the default mapping support by Vim for definition

The following mapping is set for gtags when |g:gen_tags#gtags_default_map| is 1,
which uses the |cscope| interface .
>
  Ctrl+\ c    Find functions calling this function
  Ctrl+\ d    Find functions called by this function
  Ctrl+\ e    Find this egrep pattern
  Ctrl+\ f    Find this file
  Ctrl+\ g    Find this definition
  Ctrl+\ i    Find files #including this file
  Ctrl+\ s    Find this C symbol
  Ctrl+\ t    Find this text string
<

==============================================================================
5. Options                                       *gen_tags-options*

------------------------------------------------------------------------------
g:loaded_gentags#ctags                           *g:loaded_gentags#ctags*

Set to 1 if you want to disable ctags support

------------------------------------------------------------------------------
g:loaded_gentags#gtags                           *g:loaded_gentags#gtags*

Set to 1 if you want to disable gtags support

------------------------------------------------------------------------------
g:gen_tags#ctags_bin                            *g:gen_tags#ctags_bin*

Set location of ctags. The default is 'ctags'

------------------------------------------------------------------------------
g:gen_tags#gtags_bin                            *g:gen_tags#gtags_bin*

Set location of gtags. The default is 'gtags'

------------------------------------------------------------------------------
g:gen_tags#global_bin                           *g:gen_tags#global_bin*

Set location of global; a binary of gtags. The default is 'global'

------------------------------------------------------------------------------
g:gen_tags#ctags_opts                            *g:gen_tags#ctags_opts*

Set ctags options. The `-R` is set by default,
so there is no need to add `-R` in |g:gen_tags#ctags_opts|.

The default |g:gen_tags#ctags_opts| is '', you need to set it in your vimrc

------------------------------------------------------------------------------
g:gen_tags#gtags_opts                            *g:gen_tags#gtags_opts*

Set gtags options. The database path is the default.
The gtags options will be before the database path.

The default |g:gen_tags#ctags_opts| is '', you need to set it in your vimrc

------------------------------------------------------------------------------
g:gen_tags#use_cache_dir                        *g:gen_tags#_use_cache_dir*

**This option only works for scm-repo.**
Set the path of tags. If this variable is set to 1,
|gen_tags.vim| will use project direcotry to store tags.

The default |g:gen_tags#use_cache_dir| is 1, you need to set it in  your vimrc.

0:
  scm repo:
    git  `<project folder>/.git/tags_dir`
    hg   `<project folder>/.hg/tags_dir`
    scn  `<project folder>/.svn/tags_dir`
  non-git: `$HOME/.cache/tags_dir/<project name>`

1:
  `$HOME/.cache/tags_dir/<project name>`

------------------------------------------------------------------------------
g:gen_tags#ctags_auto_gen                       *g:gen_tags#ctags_auto_gen*

Auto generate ctags when this variable is 1 and current file belongs to
a scm repo

The default |g:gen_tags#ctags_auto_gen| is 0

------------------------------------------------------------------------------
g:gen_tags#gtags_auto_gen                       *g:gen_tags#gtags_auto_gen*

Auto generate gtags when this variable is 1 and current file belongs to
a scm repo.

The default |g:gen_tags#gtags_auto_gen| is 0

------------------------------------------------------------------------------
g:gen_tags#blacklist                            *g:gen_tags#blacklist*

A list to set the blacklist
If the path in blacklist is equal `gen_tags#find_project_root()`,
the generation of ctags/gtags will be skipped.

The default |g:gen_tags#blacklist| is []

e.g.: You can set it in your vimrc as below, it will blacklist `$HOME` dir

`let g:gen_tags#blacklist = ['$HOME']`

If you want to contain the sub-directory of some folders
Please refer this issue https://github.com/jsfaint/gen_tags.vim/issues/43

For example:

>
  let g:gen_tags#blacklist = split(glob('~/.vim/plugged/*'))
  let g:gen_tags#blacklist += split(glob('~/.vim/*'))
<

------------------------------------------------------------------------------
g:gen_tags#verbose                              *g:gen_tags#verbose*

Verbose mode to echo some message.

The default |g:gen_tags#verbose| is 0

------------------------------------------------------------------------------
g:gen_tags#ctags_prune                          *g:gen_tags#ctags_prune*

Prune tags from tagfile before incremental update

The default |g:gen_tags#ctags_prune| is 0

------------------------------------------------------------------------------
g:gen_tags#gtags_default_map                    *g:gen_tags#gtags_default_map*

Enable/Disable default mapping for gtags_default_map.

The default |g:gen_tags#gtags_default_map| is 1

After set the |g:gen_tags#gtags_default_map| to 0, then you can map the
following cscope comands in your vimrc.
>
    :cs find c <C-R>=expand('<cword>')<CR><CR>
    :cs find d <C-R>=expand('<cword>')<CR><CR>
    :cs find e <C-R>=expand('<cword>')<CR><CR>
    :cs find f <C-R>=expand('<cfile>')<CR><CR>
    :cs find g <C-R>=expand('<cword>')<CR><CR>
    :cs find i <C-R>=expand('<cfile>')<CR><CR>
    :cs find s <C-R>=expand('<cword>')<CR><CR>
    :cs find t <C-R>=expand('<cword>')<CR><CR>
<
For more details, please refer help |cscope|

------------------------------------------------------------------------------
g:gen_tags#statusline                           *g:gen_tags#statusline*

Enable/Disable statusline feature.
If |g:gen_tags#statusline| is 1, the statusline will show tags generating info,
else nothing happened.

The default |g:gen_tags#statusline| is 0

==============================================================================
5. Events                                       *gen_tags-events*

GenTags#CtagsLoaded                             *GenTags#CtagsLoaded*

There are two events will be triggered after the ctags was loaded

>
  autocmd User GenTags#CtagsLoaded echo "hello world"
<

GenTags#GtagsLoaded                             *GenTags#GtagsLoaded*

There are two events will be triggered after the gtags was loaded

>
  autocmd User GenTags#GtagsLoaded nnoremap gd <c-]>
<

The idea comes from @butterflyfish in https://github.com/jsfaint/gen_tags.vim/issues/32

------------------------------------------------------------------------------
vim:tw=78:ts=8:ft=help:norl:
